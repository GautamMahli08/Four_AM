import { useEffect, useRef, useState, useMemo } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import {
  Map,
  Search,
  Filter,
  AlertTriangle,
  CheckCircle,
  Clock,
  MapPin,
  Route as RouteIcon,
  X as CloseIcon,
  Gauge,
  Fuel as FuelIcon,
} from 'lucide-react';
import { useVehicleStore, Vehicle } from '@/store/useVehicleStore';
import { useAuthStore } from '@/store/useAuthStore';

// Fix Leaflet marker icons in Vite
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
});

// --- Place → LatLng helper (Oman / Muscat demo points) ---
type LatLng = { lat: number; lng: number };
const PLACE_COORDS: Record<string, LatLng> = {
  'Seeb Industrial Area': { lat: 23.6690, lng: 58.1890 },
  'Muttrah Port': { lat: 23.6160, lng: 58.5660 },
  'Ruwi Depot': { lat: 23.5950, lng: 58.5570 },
  'Qurum Fuel Station': { lat: 23.5940, lng: 58.4200 },
  'Seeb Logistics Park': { lat: 23.6760, lng: 58.1940 },
  'Muscat Intl Airport Cargo': { lat: 23.5933, lng: 58.2844 },
  'Barka Hub': { lat: 23.7080, lng: 57.8890 },
  'Sohar Refinery': { lat: 24.4840, lng: 56.6110 },
  'Quriyat Terminal': { lat: 23.2620, lng: 58.9440 },
  'Sur Distribution Hub': { lat: 22.5700, lng: 59.5280 },
};
const placeLatLng = (name?: string | null): LatLng | null =>
  name && PLACE_COORDS[name] ? PLACE_COORDS[name] : null;

export default function VehicleMap() {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<L.Map | null>(null);
  const markersRef = useRef<Record<string, L.Marker>>({});
  const routeLayerRef = useRef<L.LayerGroup | null>(null);

  const { vehicles, selectVehicle, selectedVehicleId } = useVehicleStore();
  const { user } = useAuthStore();

  const [searchTerm, setSearchTerm] = useState('');
  const [filterSeverity, setFilterSeverity] = useState<'all' | 'critical' | 'warning' | 'normal'>('all');

  // Which vehicles this user can see
  const accessibleVehicles = useMemo(() => {
    const base = user?.role === 'manager'
      ? vehicles
      : vehicles.filter(v => user?.assignedVehicleIds?.includes(v.id));
    const term = searchTerm.toLowerCase();
    return base.filter(v =>
      v.vehicleId.toLowerCase().includes(term) ||
      v.company.toLowerCase().includes(term) ||
      v.driverName.toLowerCase().includes(term)
    );
  }, [vehicles, user, searchTerm]);

  // Apply severity filter
  const filteredVehicles = useMemo(() => {
    if (filterSeverity === 'all') return accessibleVehicles;
    return accessibleVehicles.filter(v => {
      const unacked = v.alerts.filter(a => !a.acknowledged);
      const hasCritical = unacked.some(a => a.severity === 'critical');
      const hasWarning = unacked.some(a => a.severity === 'warning');
      switch (filterSeverity) {
        case 'critical': return hasCritical;
        case 'warning': return hasWarning && !hasCritical;
        case 'normal': return unacked.length === 0;
        default: return true;
      }
    });
  }, [accessibleVehicles, filterSeverity]);

  // Selected vehicle object (for detail panel & route)
  const selectedVehicle = useMemo(
    () => vehicles.find(v => v.id === selectedVehicleId),
    [vehicles, selectedVehicleId]
  );

  // Init map
  useEffect(() => {
    if (!mapRef.current || mapInstanceRef.current) return;

    const map = L.map(mapRef.current).setView([23.5880, 58.3829], 11); // Muscat default center
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    mapInstanceRef.current = map;
    routeLayerRef.current = L.layerGroup().addTo(map);

    return () => {
      mapInstanceRef.current?.remove();
      mapInstanceRef.current = null;
    };
  }, []);

  // Paint markers for filtered vehicles
  useEffect(() => {
    const map = mapInstanceRef.current;
    if (!map) return;

    // Clear existing markers
    Object.values(markersRef.current).forEach(marker => map.removeLayer(marker));
    markersRef.current = {};

    filteredVehicles.forEach(vehicle => {
      const { lat, lng } = vehicle.sensorData.gps;

      const unacked = vehicle.alerts.filter(a => !a.acknowledged);
      const hasCritical = unacked.some(a => a.severity === 'critical');
      const hasWarning = unacked.some(a => a.severity === 'warning');

      let markerColor = '#10b981'; // green
      if (hasCritical) markerColor = '#ef4444'; // red
      else if (hasWarning) markerColor = '#f59e0b'; // amber
      else if (vehicle.status === 'offline') markerColor = '#6b7280'; // gray

      const customIcon = L.divIcon({
        className: 'custom-div-icon',
        html: `
          <div style="
            background-color: ${markerColor};
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            display: flex;
            align-items: center;
            justify-content: center;
          ">
            <div style="
              width: 8px;
              height: 8px;
              background-color: white;
              border-radius: 50%;
            "></div>
          </div>
        `,
        iconSize: [20, 20],
        iconAnchor: [10, 10]
      });

      const marker = L.marker([lat, lng], { icon: customIcon })
        .bindPopup(`
          <div class="p-2 min-w-[200px]">
            <h3 class="font-bold text-sm">${vehicle.vehicleId}</h3>
            <p class="text-xs text-gray-600">${vehicle.company}</p>
            <p class="text-xs">Driver: ${vehicle.driverName}</p>
            <p class="text-xs">Status: <span style="color: ${markerColor}">${vehicle.status}</span></p>
            <p class="text-xs">Speed: ${vehicle.sensorData.gps.speed} km/h</p>
            <p class="text-xs">Fuel: ${(vehicle.sensorData.fuel.totalFuel / 1000).toFixed(1)}K L</p>
            ${unacked.length ? `<p class="text-xs text-red-600 font-medium">⚠ ${unacked.length} active alerts</p>` : ''}
          </div>
        `)
        .on('click', () => selectVehicle(vehicle.id))
        .addTo(map);

      markersRef.current[vehicle.id] = marker;
    });

    // Fit to markers
    if (filteredVehicles.length > 0) {
      const group = new L.FeatureGroup(Object.values(markersRef.current));
      const bounds = group.getBounds();
      if (bounds.isValid()) map.fitBounds(bounds.pad(0.1));
    }
  }, [filteredVehicles, selectVehicle]);

  // Draw Start/End + polyline for selected route
  useEffect(() => {
    const map = mapInstanceRef.current;
    const routeLayer = routeLayerRef.current;
    if (!map || !routeLayer) return;

    routeLayer.clearLayers();

    if (!selectedVehicle || !selectedVehicle.route) return;

    const { origin, destination } = selectedVehicle.route;
    const start = placeLatLng(origin);
    const end = placeLatLng(destination);
    if (!start || !end) return;

    const startMarker = L.circleMarker([start.lat, start.lng], {
      radius: 7,
      weight: 2,
      color: '#1f2937', // gray-800
      fillColor: '#10b981', // green
      fillOpacity: 0.9,
    }).bindTooltip(`Start: ${origin}`);

    const endMarker = L.circleMarker([end.lat, end.lng], {
      radius: 7,
      weight: 2,
      color: '#1f2937',
      fillColor: '#ef4444', // red
      fillOpacity: 0.9,
    }).bindTooltip(`End: ${destination}`);

    const line = L.polyline(
      [
        [start.lat, start.lng],
        [end.lat, end.lng],
      ],
      { weight: 3, color: '#2563eb' } // blue-600
    );

    startMarker.addTo(routeLayer);
    endMarker.addTo(routeLayer);
    line.addTo(routeLayer);

    // Fit bounds to route (and include current vehicle point if you like)
    const current = selectedVehicle.sensorData.gps;
    const bounds = L.latLngBounds([
      [start.lat, start.lng],
      [end.lat, end.lng],
      [current.lat, current.lng],
    ]);
    map.fitBounds(bounds, { padding: [40, 40] });
  }, [selectedVehicle]);

  const getVehicleStatusBadge = (vehicle: Vehicle) => {
    const unacked = vehicle.alerts.filter(a => !a.acknowledged);
    const hasCritical = unacked.some(a => a.severity === 'critical');
    const hasWarning = unacked.some(a => a.severity === 'warning');

    if (hasCritical) return { variant: 'destructive' as const, text: 'Critical', icon: AlertTriangle };
    if (hasWarning) return { variant: 'warning' as const, text: 'Warning', icon: AlertTriangle };
    if (vehicle.status === 'offline') return { variant: 'secondary' as const, text: 'Offline', icon: Clock };
    return { variant: 'success' as const, text: 'Normal', icon: CheckCircle };
  };

  return (
    <div className="space-y-4">
      {/* Map Controls */}
      <Card className="fuel-card">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between gap-3">
            <CardTitle className="flex items-center gap-2">
              <Map className="h-5 w-5" />
              <span>Live Vehicle Tracking</span>
            </CardTitle>
            <div className="flex items-center gap-2">
              <Badge variant="success" className="text-xs">
                <div className="w-2 h-2 bg-success rounded-full mr-1 animate-pulse" />
                Live
              </Badge>
            </div>
          </div>
        </CardHeader>

        <CardContent className="space-y-4">
          {/* Search and Filter */}
          <div className="flex flex-col sm:flex-row gap-3">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search vehicles, companies, drivers..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <div className="flex gap-2">
              {(['all', 'critical', 'warning', 'normal'] as const).map((severity) => (
                <Button
                  key={severity}
                  variant={filterSeverity === severity ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setFilterSeverity(severity)}
                  className="capitalize"
                >
                  <Filter className="mr-1 h-3 w-3" />
                  {severity}
                </Button>
              ))}
            </div>
          </div>

          {/* Map Container */}
          <div className="relative">
            <div ref={mapRef} className="h-[48vh] md:h-[55vh] w-full rounded-lg border border-border" />

            {/* Map Overlay Info (counts) */}
            <div className="absolute top-4 left-4 bg-card/95 backdrop-blur-sm rounded-lg p-3 shadow-md border border-border/50">
              <div className="text-sm font-medium mb-2">Vehicle Status</div>
              <div className="space-y-1 text-xs">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 bg-success rounded-full"></div>
                  <span>Normal ({filteredVehicles.filter(v => !v.alerts.some(a => !a.acknowledged)).length})</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 bg-warning rounded-full"></div>
                  <span>Warning ({filteredVehicles.filter(v => v.alerts.some(a => a.severity === 'warning' && !a.acknowledged)).length})</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 bg-destructive rounded-full"></div>
                  <span>Critical ({filteredVehicles.filter(v => v.alerts.some(a => a.severity === 'critical' && !a.acknowledged)).length})</span>
                </div>
              </div>
            </div>

            {/* Vehicle Detail Panel (appears on selection) */}
            {selectedVehicle && (
              <div className="absolute right-4 bottom-4 w-[92vw] max-w-md bg-card/95 backdrop-blur-sm rounded-xl border border-border/60 shadow-lg">
                <div className="p-3 border-b flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <RouteIcon className="h-4 w-4" />
                    <span className="text-sm font-medium">
                      {selectedVehicle.vehicleId} • {selectedVehicle.company}
                    </span>
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => selectVehicle(null)}
                    className="h-7 w-7"
                    aria-label="Close details"
                  >
                    <CloseIcon className="h-4 w-4" />
                  </Button>
                </div>

                <div className="p-3 space-y-3 text-sm">
                  <div className="grid grid-cols-2 gap-3">
                    <div className="rounded-lg border p-2">
                      <div className="text-xs opacity-70 mb-1">Live Snapshot</div>
                      <div className="flex items-center gap-2">
                        <Gauge className="h-3.5 w-3.5" />
                        <span>{selectedVehicle.sensorData.gps.speed} km/h</span>
                      </div>
                      <div className="mt-1 text-xs opacity-70">
                        GPS: {selectedVehicle.sensorData.gps.lat.toFixed(4)}, {selectedVehicle.sensorData.gps.lng.toFixed(4)}
                      </div>
                      <div className="text-xs opacity-70">
                        Heading: {selectedVehicle.sensorData.gps.heading}°
                      </div>
                    </div>

                    <div className="rounded-lg border p-2">
                      <div className="text-xs opacity-70 mb-1">Fuel</div>
                      <div className="flex items-center gap-2">
                        <FuelIcon className="h-3.5 w-3.5" />
                        <span>{selectedVehicle.sensorData.fuel.totalFuel} L</span>
                      </div>
                      <div className="mt-1 text-xs opacity-70">
                        Compartments: {selectedVehicle.compartments.length}
                      </div>
                    </div>
                  </div>

                  <div className="rounded-lg border p-2">
                    <div className="text-xs opacity-70 mb-2">Route</div>
                    <div className="flex items-center gap-2 mb-1">
                      <MapPin className="h-3.5 w-3.5 text-emerald-600" />
                      <span className="font-medium">Start:</span>
                      <span>{selectedVehicle.route?.origin ?? '—'}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <MapPin className="h-3.5 w-3.5 text-red-600" />
                      <span className="font-medium">End:</span>
                      <span>{selectedVehicle.route?.destination ?? '—'}</span>
                    </div>
                    <div className="mt-2">
                      <div className="h-2 bg-muted rounded-full overflow-hidden">
                        <div
                          className="h-full bg-primary"
                          style={{ width: `${Math.max(0, Math.min(100, selectedVehicle.route?.progress ?? 0))}%` }}
                        />
                      </div>
                      <div className="text-xs opacity-70 mt-1">
                        {selectedVehicle.route?.progress ?? 0}% • ETA:{' '}
                        {selectedVehicle.route?.estimatedArrival
                          ? new Date(selectedVehicle.route.estimatedArrival).toLocaleString()
                          : '—'}
                      </div>
                    </div>
                  </div>

                  <div className="text-xs opacity-70">
                    Last Sync: {new Date(selectedVehicle.lastSync).toLocaleString()}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Vehicle List */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 max-h-[28vh] overflow-y-auto pr-1">
            {filteredVehicles.map((vehicle) => {
              const statusBadge = getVehicleStatusBadge(vehicle);
              return (
                <div
                  key={vehicle.id}
                  className={`p-3 rounded-lg border bg-card cursor-pointer transition-all hover:border-primary/60 hover:shadow-sm ${
                    selectedVehicleId === vehicle.id ? 'border-primary bg-primary/5' : 'border-border'
                  }`}
                  onClick={() => selectVehicle(vehicle.id)}
                >
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium text-sm">{vehicle.vehicleId}</h4>
                    <Badge variant={statusBadge.variant} className="text-xs">
                      <statusBadge.icon className="mr-1 h-3 w-3" />
                      {statusBadge.text}
                    </Badge>
                  </div>
                  <div className="space-y-1 text-xs text-muted-foreground">
                    <p>{vehicle.company}</p>
                    <p>Driver: {vehicle.driverName}</p>
                    <p>Speed: {vehicle.sensorData.gps.speed} km/h</p>
                    <p>Fuel: {(vehicle.sensorData.fuel.totalFuel / 1000).toFixed(1)}K L</p>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
